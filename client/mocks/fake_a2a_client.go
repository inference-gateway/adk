// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"net/http"
	"sync"
	"time"

	"github.com/inference-gateway/adk/client"
	"github.com/inference-gateway/adk/types"
	"go.uber.org/zap"
)

type FakeA2AClient struct {
	CancelTaskStub        func(context.Context, types.TaskIdParams) (*types.JSONRPCSuccessResponse, error)
	cancelTaskMutex       sync.RWMutex
	cancelTaskArgsForCall []struct {
		arg1 context.Context
		arg2 types.TaskIdParams
	}
	cancelTaskReturns struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}
	cancelTaskReturnsOnCall map[int]struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}
	ClearAuthStub        func()
	clearAuthMutex       sync.RWMutex
	clearAuthArgsForCall []struct {
	}
	GetAgentCardStub        func(context.Context) (*types.AgentCard, error)
	getAgentCardMutex       sync.RWMutex
	getAgentCardArgsForCall []struct {
		arg1 context.Context
	}
	getAgentCardReturns struct {
		result1 *types.AgentCard
		result2 error
	}
	getAgentCardReturnsOnCall map[int]struct {
		result1 *types.AgentCard
		result2 error
	}
	GetAuthenticatedExtendedCardStub        func(context.Context) (*types.AgentCard, error)
	getAuthenticatedExtendedCardMutex       sync.RWMutex
	getAuthenticatedExtendedCardArgsForCall []struct {
		arg1 context.Context
	}
	getAuthenticatedExtendedCardReturns struct {
		result1 *types.AgentCard
		result2 error
	}
	getAuthenticatedExtendedCardReturnsOnCall map[int]struct {
		result1 *types.AgentCard
		result2 error
	}
	GetBaseURLStub        func() string
	getBaseURLMutex       sync.RWMutex
	getBaseURLArgsForCall []struct {
	}
	getBaseURLReturns struct {
		result1 string
	}
	getBaseURLReturnsOnCall map[int]struct {
		result1 string
	}
	GetHealthStub        func(context.Context) (*client.HealthResponse, error)
	getHealthMutex       sync.RWMutex
	getHealthArgsForCall []struct {
		arg1 context.Context
	}
	getHealthReturns struct {
		result1 *client.HealthResponse
		result2 error
	}
	getHealthReturnsOnCall map[int]struct {
		result1 *client.HealthResponse
		result2 error
	}
	GetLoggerStub        func() *zap.Logger
	getLoggerMutex       sync.RWMutex
	getLoggerArgsForCall []struct {
	}
	getLoggerReturns struct {
		result1 *zap.Logger
	}
	getLoggerReturnsOnCall map[int]struct {
		result1 *zap.Logger
	}
	GetTaskStub        func(context.Context, types.TaskQueryParams) (*types.JSONRPCSuccessResponse, error)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
		arg1 context.Context
		arg2 types.TaskQueryParams
	}
	getTaskReturns struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}
	getTaskReturnsOnCall map[int]struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}
	ListTasksStub        func(context.Context, types.TaskListParams) (*types.JSONRPCSuccessResponse, error)
	listTasksMutex       sync.RWMutex
	listTasksArgsForCall []struct {
		arg1 context.Context
		arg2 types.TaskListParams
	}
	listTasksReturns struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}
	listTasksReturnsOnCall map[int]struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}
	SendTaskStub        func(context.Context, types.MessageSendParams) (*types.JSONRPCSuccessResponse, error)
	sendTaskMutex       sync.RWMutex
	sendTaskArgsForCall []struct {
		arg1 context.Context
		arg2 types.MessageSendParams
	}
	sendTaskReturns struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}
	sendTaskReturnsOnCall map[int]struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}
	SendTaskStreamingStub        func(context.Context, types.MessageSendParams, chan<- interface{}) error
	sendTaskStreamingMutex       sync.RWMutex
	sendTaskStreamingArgsForCall []struct {
		arg1 context.Context
		arg2 types.MessageSendParams
		arg3 chan<- interface{}
	}
	sendTaskStreamingReturns struct {
		result1 error
	}
	sendTaskStreamingReturnsOnCall map[int]struct {
		result1 error
	}
	SetAPIKeyStub        func(string, ...string)
	setAPIKeyMutex       sync.RWMutex
	setAPIKeyArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	SetAuthTokenStub        func(string)
	setAuthTokenMutex       sync.RWMutex
	setAuthTokenArgsForCall []struct {
		arg1 string
	}
	SetHTTPClientStub        func(*http.Client)
	setHTTPClientMutex       sync.RWMutex
	setHTTPClientArgsForCall []struct {
		arg1 *http.Client
	}
	SetLoggerStub        func(*zap.Logger)
	setLoggerMutex       sync.RWMutex
	setLoggerArgsForCall []struct {
		arg1 *zap.Logger
	}
	SetTimeoutStub        func(time.Duration)
	setTimeoutMutex       sync.RWMutex
	setTimeoutArgsForCall []struct {
		arg1 time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeA2AClient) CancelTask(arg1 context.Context, arg2 types.TaskIdParams) (*types.JSONRPCSuccessResponse, error) {
	fake.cancelTaskMutex.Lock()
	ret, specificReturn := fake.cancelTaskReturnsOnCall[len(fake.cancelTaskArgsForCall)]
	fake.cancelTaskArgsForCall = append(fake.cancelTaskArgsForCall, struct {
		arg1 context.Context
		arg2 types.TaskIdParams
	}{arg1, arg2})
	stub := fake.CancelTaskStub
	fakeReturns := fake.cancelTaskReturns
	fake.recordInvocation("CancelTask", []interface{}{arg1, arg2})
	fake.cancelTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2AClient) CancelTaskCallCount() int {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return len(fake.cancelTaskArgsForCall)
}

func (fake *FakeA2AClient) CancelTaskCalls(stub func(context.Context, types.TaskIdParams) (*types.JSONRPCSuccessResponse, error)) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = stub
}

func (fake *FakeA2AClient) CancelTaskArgsForCall(i int) (context.Context, types.TaskIdParams) {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	argsForCall := fake.cancelTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AClient) CancelTaskReturns(result1 *types.JSONRPCSuccessResponse, result2 error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = nil
	fake.cancelTaskReturns = struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) CancelTaskReturnsOnCall(i int, result1 *types.JSONRPCSuccessResponse, result2 error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = nil
	if fake.cancelTaskReturnsOnCall == nil {
		fake.cancelTaskReturnsOnCall = make(map[int]struct {
			result1 *types.JSONRPCSuccessResponse
			result2 error
		})
	}
	fake.cancelTaskReturnsOnCall[i] = struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) ClearAuth() {
	fake.clearAuthMutex.Lock()
	fake.clearAuthArgsForCall = append(fake.clearAuthArgsForCall, struct {
	}{})
	stub := fake.ClearAuthStub
	fake.recordInvocation("ClearAuth", []interface{}{})
	fake.clearAuthMutex.Unlock()
	if stub != nil {
		fake.ClearAuthStub()
	}
}

func (fake *FakeA2AClient) ClearAuthCallCount() int {
	fake.clearAuthMutex.RLock()
	defer fake.clearAuthMutex.RUnlock()
	return len(fake.clearAuthArgsForCall)
}

func (fake *FakeA2AClient) ClearAuthCalls(stub func()) {
	fake.clearAuthMutex.Lock()
	defer fake.clearAuthMutex.Unlock()
	fake.ClearAuthStub = stub
}

func (fake *FakeA2AClient) GetAgentCard(arg1 context.Context) (*types.AgentCard, error) {
	fake.getAgentCardMutex.Lock()
	ret, specificReturn := fake.getAgentCardReturnsOnCall[len(fake.getAgentCardArgsForCall)]
	fake.getAgentCardArgsForCall = append(fake.getAgentCardArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAgentCardStub
	fakeReturns := fake.getAgentCardReturns
	fake.recordInvocation("GetAgentCard", []interface{}{arg1})
	fake.getAgentCardMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2AClient) GetAgentCardCallCount() int {
	fake.getAgentCardMutex.RLock()
	defer fake.getAgentCardMutex.RUnlock()
	return len(fake.getAgentCardArgsForCall)
}

func (fake *FakeA2AClient) GetAgentCardCalls(stub func(context.Context) (*types.AgentCard, error)) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = stub
}

func (fake *FakeA2AClient) GetAgentCardArgsForCall(i int) context.Context {
	fake.getAgentCardMutex.RLock()
	defer fake.getAgentCardMutex.RUnlock()
	argsForCall := fake.getAgentCardArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AClient) GetAgentCardReturns(result1 *types.AgentCard, result2 error) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = nil
	fake.getAgentCardReturns = struct {
		result1 *types.AgentCard
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) GetAgentCardReturnsOnCall(i int, result1 *types.AgentCard, result2 error) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = nil
	if fake.getAgentCardReturnsOnCall == nil {
		fake.getAgentCardReturnsOnCall = make(map[int]struct {
			result1 *types.AgentCard
			result2 error
		})
	}
	fake.getAgentCardReturnsOnCall[i] = struct {
		result1 *types.AgentCard
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) GetAuthenticatedExtendedCard(arg1 context.Context) (*types.AgentCard, error) {
	fake.getAuthenticatedExtendedCardMutex.Lock()
	ret, specificReturn := fake.getAuthenticatedExtendedCardReturnsOnCall[len(fake.getAuthenticatedExtendedCardArgsForCall)]
	fake.getAuthenticatedExtendedCardArgsForCall = append(fake.getAuthenticatedExtendedCardArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAuthenticatedExtendedCardStub
	fakeReturns := fake.getAuthenticatedExtendedCardReturns
	fake.recordInvocation("GetAuthenticatedExtendedCard", []interface{}{arg1})
	fake.getAuthenticatedExtendedCardMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2AClient) GetAuthenticatedExtendedCardCallCount() int {
	fake.getAuthenticatedExtendedCardMutex.RLock()
	defer fake.getAuthenticatedExtendedCardMutex.RUnlock()
	return len(fake.getAuthenticatedExtendedCardArgsForCall)
}

func (fake *FakeA2AClient) GetAuthenticatedExtendedCardCalls(stub func(context.Context) (*types.AgentCard, error)) {
	fake.getAuthenticatedExtendedCardMutex.Lock()
	defer fake.getAuthenticatedExtendedCardMutex.Unlock()
	fake.GetAuthenticatedExtendedCardStub = stub
}

func (fake *FakeA2AClient) GetAuthenticatedExtendedCardArgsForCall(i int) context.Context {
	fake.getAuthenticatedExtendedCardMutex.RLock()
	defer fake.getAuthenticatedExtendedCardMutex.RUnlock()
	argsForCall := fake.getAuthenticatedExtendedCardArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AClient) GetAuthenticatedExtendedCardReturns(result1 *types.AgentCard, result2 error) {
	fake.getAuthenticatedExtendedCardMutex.Lock()
	defer fake.getAuthenticatedExtendedCardMutex.Unlock()
	fake.GetAuthenticatedExtendedCardStub = nil
	fake.getAuthenticatedExtendedCardReturns = struct {
		result1 *types.AgentCard
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) GetAuthenticatedExtendedCardReturnsOnCall(i int, result1 *types.AgentCard, result2 error) {
	fake.getAuthenticatedExtendedCardMutex.Lock()
	defer fake.getAuthenticatedExtendedCardMutex.Unlock()
	fake.GetAuthenticatedExtendedCardStub = nil
	if fake.getAuthenticatedExtendedCardReturnsOnCall == nil {
		fake.getAuthenticatedExtendedCardReturnsOnCall = make(map[int]struct {
			result1 *types.AgentCard
			result2 error
		})
	}
	fake.getAuthenticatedExtendedCardReturnsOnCall[i] = struct {
		result1 *types.AgentCard
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) GetBaseURL() string {
	fake.getBaseURLMutex.Lock()
	ret, specificReturn := fake.getBaseURLReturnsOnCall[len(fake.getBaseURLArgsForCall)]
	fake.getBaseURLArgsForCall = append(fake.getBaseURLArgsForCall, struct {
	}{})
	stub := fake.GetBaseURLStub
	fakeReturns := fake.getBaseURLReturns
	fake.recordInvocation("GetBaseURL", []interface{}{})
	fake.getBaseURLMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AClient) GetBaseURLCallCount() int {
	fake.getBaseURLMutex.RLock()
	defer fake.getBaseURLMutex.RUnlock()
	return len(fake.getBaseURLArgsForCall)
}

func (fake *FakeA2AClient) GetBaseURLCalls(stub func() string) {
	fake.getBaseURLMutex.Lock()
	defer fake.getBaseURLMutex.Unlock()
	fake.GetBaseURLStub = stub
}

func (fake *FakeA2AClient) GetBaseURLReturns(result1 string) {
	fake.getBaseURLMutex.Lock()
	defer fake.getBaseURLMutex.Unlock()
	fake.GetBaseURLStub = nil
	fake.getBaseURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeA2AClient) GetBaseURLReturnsOnCall(i int, result1 string) {
	fake.getBaseURLMutex.Lock()
	defer fake.getBaseURLMutex.Unlock()
	fake.GetBaseURLStub = nil
	if fake.getBaseURLReturnsOnCall == nil {
		fake.getBaseURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBaseURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeA2AClient) GetHealth(arg1 context.Context) (*client.HealthResponse, error) {
	fake.getHealthMutex.Lock()
	ret, specificReturn := fake.getHealthReturnsOnCall[len(fake.getHealthArgsForCall)]
	fake.getHealthArgsForCall = append(fake.getHealthArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetHealthStub
	fakeReturns := fake.getHealthReturns
	fake.recordInvocation("GetHealth", []interface{}{arg1})
	fake.getHealthMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2AClient) GetHealthCallCount() int {
	fake.getHealthMutex.RLock()
	defer fake.getHealthMutex.RUnlock()
	return len(fake.getHealthArgsForCall)
}

func (fake *FakeA2AClient) GetHealthCalls(stub func(context.Context) (*client.HealthResponse, error)) {
	fake.getHealthMutex.Lock()
	defer fake.getHealthMutex.Unlock()
	fake.GetHealthStub = stub
}

func (fake *FakeA2AClient) GetHealthArgsForCall(i int) context.Context {
	fake.getHealthMutex.RLock()
	defer fake.getHealthMutex.RUnlock()
	argsForCall := fake.getHealthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AClient) GetHealthReturns(result1 *client.HealthResponse, result2 error) {
	fake.getHealthMutex.Lock()
	defer fake.getHealthMutex.Unlock()
	fake.GetHealthStub = nil
	fake.getHealthReturns = struct {
		result1 *client.HealthResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) GetHealthReturnsOnCall(i int, result1 *client.HealthResponse, result2 error) {
	fake.getHealthMutex.Lock()
	defer fake.getHealthMutex.Unlock()
	fake.GetHealthStub = nil
	if fake.getHealthReturnsOnCall == nil {
		fake.getHealthReturnsOnCall = make(map[int]struct {
			result1 *client.HealthResponse
			result2 error
		})
	}
	fake.getHealthReturnsOnCall[i] = struct {
		result1 *client.HealthResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) GetLogger() *zap.Logger {
	fake.getLoggerMutex.Lock()
	ret, specificReturn := fake.getLoggerReturnsOnCall[len(fake.getLoggerArgsForCall)]
	fake.getLoggerArgsForCall = append(fake.getLoggerArgsForCall, struct {
	}{})
	stub := fake.GetLoggerStub
	fakeReturns := fake.getLoggerReturns
	fake.recordInvocation("GetLogger", []interface{}{})
	fake.getLoggerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AClient) GetLoggerCallCount() int {
	fake.getLoggerMutex.RLock()
	defer fake.getLoggerMutex.RUnlock()
	return len(fake.getLoggerArgsForCall)
}

func (fake *FakeA2AClient) GetLoggerCalls(stub func() *zap.Logger) {
	fake.getLoggerMutex.Lock()
	defer fake.getLoggerMutex.Unlock()
	fake.GetLoggerStub = stub
}

func (fake *FakeA2AClient) GetLoggerReturns(result1 *zap.Logger) {
	fake.getLoggerMutex.Lock()
	defer fake.getLoggerMutex.Unlock()
	fake.GetLoggerStub = nil
	fake.getLoggerReturns = struct {
		result1 *zap.Logger
	}{result1}
}

func (fake *FakeA2AClient) GetLoggerReturnsOnCall(i int, result1 *zap.Logger) {
	fake.getLoggerMutex.Lock()
	defer fake.getLoggerMutex.Unlock()
	fake.GetLoggerStub = nil
	if fake.getLoggerReturnsOnCall == nil {
		fake.getLoggerReturnsOnCall = make(map[int]struct {
			result1 *zap.Logger
		})
	}
	fake.getLoggerReturnsOnCall[i] = struct {
		result1 *zap.Logger
	}{result1}
}

func (fake *FakeA2AClient) GetTask(arg1 context.Context, arg2 types.TaskQueryParams) (*types.JSONRPCSuccessResponse, error) {
	fake.getTaskMutex.Lock()
	ret, specificReturn := fake.getTaskReturnsOnCall[len(fake.getTaskArgsForCall)]
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
		arg1 context.Context
		arg2 types.TaskQueryParams
	}{arg1, arg2})
	stub := fake.GetTaskStub
	fakeReturns := fake.getTaskReturns
	fake.recordInvocation("GetTask", []interface{}{arg1, arg2})
	fake.getTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2AClient) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeA2AClient) GetTaskCalls(stub func(context.Context, types.TaskQueryParams) (*types.JSONRPCSuccessResponse, error)) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = stub
}

func (fake *FakeA2AClient) GetTaskArgsForCall(i int) (context.Context, types.TaskQueryParams) {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	argsForCall := fake.getTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AClient) GetTaskReturns(result1 *types.JSONRPCSuccessResponse, result2 error) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) GetTaskReturnsOnCall(i int, result1 *types.JSONRPCSuccessResponse, result2 error) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	if fake.getTaskReturnsOnCall == nil {
		fake.getTaskReturnsOnCall = make(map[int]struct {
			result1 *types.JSONRPCSuccessResponse
			result2 error
		})
	}
	fake.getTaskReturnsOnCall[i] = struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) ListTasks(arg1 context.Context, arg2 types.TaskListParams) (*types.JSONRPCSuccessResponse, error) {
	fake.listTasksMutex.Lock()
	ret, specificReturn := fake.listTasksReturnsOnCall[len(fake.listTasksArgsForCall)]
	fake.listTasksArgsForCall = append(fake.listTasksArgsForCall, struct {
		arg1 context.Context
		arg2 types.TaskListParams
	}{arg1, arg2})
	stub := fake.ListTasksStub
	fakeReturns := fake.listTasksReturns
	fake.recordInvocation("ListTasks", []interface{}{arg1, arg2})
	fake.listTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2AClient) ListTasksCallCount() int {
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	return len(fake.listTasksArgsForCall)
}

func (fake *FakeA2AClient) ListTasksCalls(stub func(context.Context, types.TaskListParams) (*types.JSONRPCSuccessResponse, error)) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = stub
}

func (fake *FakeA2AClient) ListTasksArgsForCall(i int) (context.Context, types.TaskListParams) {
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	argsForCall := fake.listTasksArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AClient) ListTasksReturns(result1 *types.JSONRPCSuccessResponse, result2 error) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = nil
	fake.listTasksReturns = struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) ListTasksReturnsOnCall(i int, result1 *types.JSONRPCSuccessResponse, result2 error) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = nil
	if fake.listTasksReturnsOnCall == nil {
		fake.listTasksReturnsOnCall = make(map[int]struct {
			result1 *types.JSONRPCSuccessResponse
			result2 error
		})
	}
	fake.listTasksReturnsOnCall[i] = struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) SendTask(arg1 context.Context, arg2 types.MessageSendParams) (*types.JSONRPCSuccessResponse, error) {
	fake.sendTaskMutex.Lock()
	ret, specificReturn := fake.sendTaskReturnsOnCall[len(fake.sendTaskArgsForCall)]
	fake.sendTaskArgsForCall = append(fake.sendTaskArgsForCall, struct {
		arg1 context.Context
		arg2 types.MessageSendParams
	}{arg1, arg2})
	stub := fake.SendTaskStub
	fakeReturns := fake.sendTaskReturns
	fake.recordInvocation("SendTask", []interface{}{arg1, arg2})
	fake.sendTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeA2AClient) SendTaskCallCount() int {
	fake.sendTaskMutex.RLock()
	defer fake.sendTaskMutex.RUnlock()
	return len(fake.sendTaskArgsForCall)
}

func (fake *FakeA2AClient) SendTaskCalls(stub func(context.Context, types.MessageSendParams) (*types.JSONRPCSuccessResponse, error)) {
	fake.sendTaskMutex.Lock()
	defer fake.sendTaskMutex.Unlock()
	fake.SendTaskStub = stub
}

func (fake *FakeA2AClient) SendTaskArgsForCall(i int) (context.Context, types.MessageSendParams) {
	fake.sendTaskMutex.RLock()
	defer fake.sendTaskMutex.RUnlock()
	argsForCall := fake.sendTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AClient) SendTaskReturns(result1 *types.JSONRPCSuccessResponse, result2 error) {
	fake.sendTaskMutex.Lock()
	defer fake.sendTaskMutex.Unlock()
	fake.SendTaskStub = nil
	fake.sendTaskReturns = struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) SendTaskReturnsOnCall(i int, result1 *types.JSONRPCSuccessResponse, result2 error) {
	fake.sendTaskMutex.Lock()
	defer fake.sendTaskMutex.Unlock()
	fake.SendTaskStub = nil
	if fake.sendTaskReturnsOnCall == nil {
		fake.sendTaskReturnsOnCall = make(map[int]struct {
			result1 *types.JSONRPCSuccessResponse
			result2 error
		})
	}
	fake.sendTaskReturnsOnCall[i] = struct {
		result1 *types.JSONRPCSuccessResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeA2AClient) SendTaskStreaming(arg1 context.Context, arg2 types.MessageSendParams, arg3 chan<- interface{}) error {
	fake.sendTaskStreamingMutex.Lock()
	ret, specificReturn := fake.sendTaskStreamingReturnsOnCall[len(fake.sendTaskStreamingArgsForCall)]
	fake.sendTaskStreamingArgsForCall = append(fake.sendTaskStreamingArgsForCall, struct {
		arg1 context.Context
		arg2 types.MessageSendParams
		arg3 chan<- interface{}
	}{arg1, arg2, arg3})
	stub := fake.SendTaskStreamingStub
	fakeReturns := fake.sendTaskStreamingReturns
	fake.recordInvocation("SendTaskStreaming", []interface{}{arg1, arg2, arg3})
	fake.sendTaskStreamingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AClient) SendTaskStreamingCallCount() int {
	fake.sendTaskStreamingMutex.RLock()
	defer fake.sendTaskStreamingMutex.RUnlock()
	return len(fake.sendTaskStreamingArgsForCall)
}

func (fake *FakeA2AClient) SendTaskStreamingCalls(stub func(context.Context, types.MessageSendParams, chan<- interface{}) error) {
	fake.sendTaskStreamingMutex.Lock()
	defer fake.sendTaskStreamingMutex.Unlock()
	fake.SendTaskStreamingStub = stub
}

func (fake *FakeA2AClient) SendTaskStreamingArgsForCall(i int) (context.Context, types.MessageSendParams, chan<- interface{}) {
	fake.sendTaskStreamingMutex.RLock()
	defer fake.sendTaskStreamingMutex.RUnlock()
	argsForCall := fake.sendTaskStreamingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeA2AClient) SendTaskStreamingReturns(result1 error) {
	fake.sendTaskStreamingMutex.Lock()
	defer fake.sendTaskStreamingMutex.Unlock()
	fake.SendTaskStreamingStub = nil
	fake.sendTaskStreamingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AClient) SendTaskStreamingReturnsOnCall(i int, result1 error) {
	fake.sendTaskStreamingMutex.Lock()
	defer fake.sendTaskStreamingMutex.Unlock()
	fake.SendTaskStreamingStub = nil
	if fake.sendTaskStreamingReturnsOnCall == nil {
		fake.sendTaskStreamingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendTaskStreamingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AClient) SetAPIKey(arg1 string, arg2 ...string) {
	fake.setAPIKeyMutex.Lock()
	fake.setAPIKeyArgsForCall = append(fake.setAPIKeyArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.SetAPIKeyStub
	fake.recordInvocation("SetAPIKey", []interface{}{arg1, arg2})
	fake.setAPIKeyMutex.Unlock()
	if stub != nil {
		fake.SetAPIKeyStub(arg1, arg2...)
	}
}

func (fake *FakeA2AClient) SetAPIKeyCallCount() int {
	fake.setAPIKeyMutex.RLock()
	defer fake.setAPIKeyMutex.RUnlock()
	return len(fake.setAPIKeyArgsForCall)
}

func (fake *FakeA2AClient) SetAPIKeyCalls(stub func(string, ...string)) {
	fake.setAPIKeyMutex.Lock()
	defer fake.setAPIKeyMutex.Unlock()
	fake.SetAPIKeyStub = stub
}

func (fake *FakeA2AClient) SetAPIKeyArgsForCall(i int) (string, []string) {
	fake.setAPIKeyMutex.RLock()
	defer fake.setAPIKeyMutex.RUnlock()
	argsForCall := fake.setAPIKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AClient) SetAuthToken(arg1 string) {
	fake.setAuthTokenMutex.Lock()
	fake.setAuthTokenArgsForCall = append(fake.setAuthTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAuthTokenStub
	fake.recordInvocation("SetAuthToken", []interface{}{arg1})
	fake.setAuthTokenMutex.Unlock()
	if stub != nil {
		fake.SetAuthTokenStub(arg1)
	}
}

func (fake *FakeA2AClient) SetAuthTokenCallCount() int {
	fake.setAuthTokenMutex.RLock()
	defer fake.setAuthTokenMutex.RUnlock()
	return len(fake.setAuthTokenArgsForCall)
}

func (fake *FakeA2AClient) SetAuthTokenCalls(stub func(string)) {
	fake.setAuthTokenMutex.Lock()
	defer fake.setAuthTokenMutex.Unlock()
	fake.SetAuthTokenStub = stub
}

func (fake *FakeA2AClient) SetAuthTokenArgsForCall(i int) string {
	fake.setAuthTokenMutex.RLock()
	defer fake.setAuthTokenMutex.RUnlock()
	argsForCall := fake.setAuthTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AClient) SetHTTPClient(arg1 *http.Client) {
	fake.setHTTPClientMutex.Lock()
	fake.setHTTPClientArgsForCall = append(fake.setHTTPClientArgsForCall, struct {
		arg1 *http.Client
	}{arg1})
	stub := fake.SetHTTPClientStub
	fake.recordInvocation("SetHTTPClient", []interface{}{arg1})
	fake.setHTTPClientMutex.Unlock()
	if stub != nil {
		fake.SetHTTPClientStub(arg1)
	}
}

func (fake *FakeA2AClient) SetHTTPClientCallCount() int {
	fake.setHTTPClientMutex.RLock()
	defer fake.setHTTPClientMutex.RUnlock()
	return len(fake.setHTTPClientArgsForCall)
}

func (fake *FakeA2AClient) SetHTTPClientCalls(stub func(*http.Client)) {
	fake.setHTTPClientMutex.Lock()
	defer fake.setHTTPClientMutex.Unlock()
	fake.SetHTTPClientStub = stub
}

func (fake *FakeA2AClient) SetHTTPClientArgsForCall(i int) *http.Client {
	fake.setHTTPClientMutex.RLock()
	defer fake.setHTTPClientMutex.RUnlock()
	argsForCall := fake.setHTTPClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AClient) SetLogger(arg1 *zap.Logger) {
	fake.setLoggerMutex.Lock()
	fake.setLoggerArgsForCall = append(fake.setLoggerArgsForCall, struct {
		arg1 *zap.Logger
	}{arg1})
	stub := fake.SetLoggerStub
	fake.recordInvocation("SetLogger", []interface{}{arg1})
	fake.setLoggerMutex.Unlock()
	if stub != nil {
		fake.SetLoggerStub(arg1)
	}
}

func (fake *FakeA2AClient) SetLoggerCallCount() int {
	fake.setLoggerMutex.RLock()
	defer fake.setLoggerMutex.RUnlock()
	return len(fake.setLoggerArgsForCall)
}

func (fake *FakeA2AClient) SetLoggerCalls(stub func(*zap.Logger)) {
	fake.setLoggerMutex.Lock()
	defer fake.setLoggerMutex.Unlock()
	fake.SetLoggerStub = stub
}

func (fake *FakeA2AClient) SetLoggerArgsForCall(i int) *zap.Logger {
	fake.setLoggerMutex.RLock()
	defer fake.setLoggerMutex.RUnlock()
	argsForCall := fake.setLoggerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AClient) SetTimeout(arg1 time.Duration) {
	fake.setTimeoutMutex.Lock()
	fake.setTimeoutArgsForCall = append(fake.setTimeoutArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.SetTimeoutStub
	fake.recordInvocation("SetTimeout", []interface{}{arg1})
	fake.setTimeoutMutex.Unlock()
	if stub != nil {
		fake.SetTimeoutStub(arg1)
	}
}

func (fake *FakeA2AClient) SetTimeoutCallCount() int {
	fake.setTimeoutMutex.RLock()
	defer fake.setTimeoutMutex.RUnlock()
	return len(fake.setTimeoutArgsForCall)
}

func (fake *FakeA2AClient) SetTimeoutCalls(stub func(time.Duration)) {
	fake.setTimeoutMutex.Lock()
	defer fake.setTimeoutMutex.Unlock()
	fake.SetTimeoutStub = stub
}

func (fake *FakeA2AClient) SetTimeoutArgsForCall(i int) time.Duration {
	fake.setTimeoutMutex.RLock()
	defer fake.setTimeoutMutex.RUnlock()
	argsForCall := fake.setTimeoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	fake.clearAuthMutex.RLock()
	defer fake.clearAuthMutex.RUnlock()
	fake.getAgentCardMutex.RLock()
	defer fake.getAgentCardMutex.RUnlock()
	fake.getAuthenticatedExtendedCardMutex.RLock()
	defer fake.getAuthenticatedExtendedCardMutex.RUnlock()
	fake.getBaseURLMutex.RLock()
	defer fake.getBaseURLMutex.RUnlock()
	fake.getHealthMutex.RLock()
	defer fake.getHealthMutex.RUnlock()
	fake.getLoggerMutex.RLock()
	defer fake.getLoggerMutex.RUnlock()
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	fake.sendTaskMutex.RLock()
	defer fake.sendTaskMutex.RUnlock()
	fake.sendTaskStreamingMutex.RLock()
	defer fake.sendTaskStreamingMutex.RUnlock()
	fake.setAPIKeyMutex.RLock()
	defer fake.setAPIKeyMutex.RUnlock()
	fake.setAuthTokenMutex.RLock()
	defer fake.setAuthTokenMutex.RUnlock()
	fake.setHTTPClientMutex.RLock()
	defer fake.setHTTPClientMutex.RUnlock()
	fake.setLoggerMutex.RLock()
	defer fake.setLoggerMutex.RUnlock()
	fake.setTimeoutMutex.RLock()
	defer fake.setTimeoutMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeA2AClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.A2AClient = new(FakeA2AClient)
