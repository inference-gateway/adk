// Code generated by counterfeiter. DO NOT EDIT.
package serverfakes

import (
	"context"
	"sync"

	v2 "github.com/cloudevents/sdk-go/v2"
	"github.com/inference-gateway/adk/server"
	"github.com/inference-gateway/adk/types"
)

type FakeOpenAICompatibleAgent struct {
	RunStub        func(context.Context, []types.Message) (*server.AgentResponse, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 context.Context
		arg2 []types.Message
	}
	runReturns struct {
		result1 *server.AgentResponse
		result2 error
	}
	runReturnsOnCall map[int]struct {
		result1 *server.AgentResponse
		result2 error
	}
	RunWithStreamStub        func(context.Context, []types.Message) (<-chan v2.Event, error)
	runWithStreamMutex       sync.RWMutex
	runWithStreamArgsForCall []struct {
		arg1 context.Context
		arg2 []types.Message
	}
	runWithStreamReturns struct {
		result1 <-chan v2.Event
		result2 error
	}
	runWithStreamReturnsOnCall map[int]struct {
		result1 <-chan v2.Event
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOpenAICompatibleAgent) Run(arg1 context.Context, arg2 []types.Message) (*server.AgentResponse, error) {
	var arg2Copy []types.Message
	if arg2 != nil {
		arg2Copy = make([]types.Message, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 context.Context
		arg2 []types.Message
	}{arg1, arg2Copy})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1, arg2Copy})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOpenAICompatibleAgent) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeOpenAICompatibleAgent) RunCalls(stub func(context.Context, []types.Message) (*server.AgentResponse, error)) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeOpenAICompatibleAgent) RunArgsForCall(i int) (context.Context, []types.Message) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOpenAICompatibleAgent) RunReturns(result1 *server.AgentResponse, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 *server.AgentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeOpenAICompatibleAgent) RunReturnsOnCall(i int, result1 *server.AgentResponse, result2 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 *server.AgentResponse
			result2 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 *server.AgentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeOpenAICompatibleAgent) RunWithStream(arg1 context.Context, arg2 []types.Message) (<-chan v2.Event, error) {
	var arg2Copy []types.Message
	if arg2 != nil {
		arg2Copy = make([]types.Message, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.runWithStreamMutex.Lock()
	ret, specificReturn := fake.runWithStreamReturnsOnCall[len(fake.runWithStreamArgsForCall)]
	fake.runWithStreamArgsForCall = append(fake.runWithStreamArgsForCall, struct {
		arg1 context.Context
		arg2 []types.Message
	}{arg1, arg2Copy})
	stub := fake.RunWithStreamStub
	fakeReturns := fake.runWithStreamReturns
	fake.recordInvocation("RunWithStream", []interface{}{arg1, arg2Copy})
	fake.runWithStreamMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOpenAICompatibleAgent) RunWithStreamCallCount() int {
	fake.runWithStreamMutex.RLock()
	defer fake.runWithStreamMutex.RUnlock()
	return len(fake.runWithStreamArgsForCall)
}

func (fake *FakeOpenAICompatibleAgent) RunWithStreamCalls(stub func(context.Context, []types.Message) (<-chan v2.Event, error)) {
	fake.runWithStreamMutex.Lock()
	defer fake.runWithStreamMutex.Unlock()
	fake.RunWithStreamStub = stub
}

func (fake *FakeOpenAICompatibleAgent) RunWithStreamArgsForCall(i int) (context.Context, []types.Message) {
	fake.runWithStreamMutex.RLock()
	defer fake.runWithStreamMutex.RUnlock()
	argsForCall := fake.runWithStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOpenAICompatibleAgent) RunWithStreamReturns(result1 <-chan v2.Event, result2 error) {
	fake.runWithStreamMutex.Lock()
	defer fake.runWithStreamMutex.Unlock()
	fake.RunWithStreamStub = nil
	fake.runWithStreamReturns = struct {
		result1 <-chan v2.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeOpenAICompatibleAgent) RunWithStreamReturnsOnCall(i int, result1 <-chan v2.Event, result2 error) {
	fake.runWithStreamMutex.Lock()
	defer fake.runWithStreamMutex.Unlock()
	fake.RunWithStreamStub = nil
	if fake.runWithStreamReturnsOnCall == nil {
		fake.runWithStreamReturnsOnCall = make(map[int]struct {
			result1 <-chan v2.Event
			result2 error
		})
	}
	fake.runWithStreamReturnsOnCall[i] = struct {
		result1 <-chan v2.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeOpenAICompatibleAgent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runWithStreamMutex.RLock()
	defer fake.runWithStreamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOpenAICompatibleAgent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.OpenAICompatibleAgent = new(FakeOpenAICompatibleAgent)
