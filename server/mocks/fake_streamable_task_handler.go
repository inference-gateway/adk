// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/adk/server"
	"github.com/inference-gateway/adk/types"
)

type FakeStreamableTaskHandler struct {
	GetAgentStub        func() server.OpenAICompatibleAgent
	getAgentMutex       sync.RWMutex
	getAgentArgsForCall []struct {
	}
	getAgentReturns struct {
		result1 server.OpenAICompatibleAgent
	}
	getAgentReturnsOnCall map[int]struct {
		result1 server.OpenAICompatibleAgent
	}
	HandleStreamingTaskStub        func(context.Context, *types.Task, *types.Message) (<-chan server.StreamEvent, error)
	handleStreamingTaskMutex       sync.RWMutex
	handleStreamingTaskArgsForCall []struct {
		arg1 context.Context
		arg2 *types.Task
		arg3 *types.Message
	}
	handleStreamingTaskReturns struct {
		result1 <-chan server.StreamEvent
		result2 error
	}
	handleStreamingTaskReturnsOnCall map[int]struct {
		result1 <-chan server.StreamEvent
		result2 error
	}
	SetAgentStub        func(server.OpenAICompatibleAgent)
	setAgentMutex       sync.RWMutex
	setAgentArgsForCall []struct {
		arg1 server.OpenAICompatibleAgent
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStreamableTaskHandler) GetAgent() server.OpenAICompatibleAgent {
	fake.getAgentMutex.Lock()
	ret, specificReturn := fake.getAgentReturnsOnCall[len(fake.getAgentArgsForCall)]
	fake.getAgentArgsForCall = append(fake.getAgentArgsForCall, struct {
	}{})
	stub := fake.GetAgentStub
	fakeReturns := fake.getAgentReturns
	fake.recordInvocation("GetAgent", []interface{}{})
	fake.getAgentMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStreamableTaskHandler) GetAgentCallCount() int {
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	return len(fake.getAgentArgsForCall)
}

func (fake *FakeStreamableTaskHandler) GetAgentCalls(stub func() server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = stub
}

func (fake *FakeStreamableTaskHandler) GetAgentReturns(result1 server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = nil
	fake.getAgentReturns = struct {
		result1 server.OpenAICompatibleAgent
	}{result1}
}

func (fake *FakeStreamableTaskHandler) GetAgentReturnsOnCall(i int, result1 server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = nil
	if fake.getAgentReturnsOnCall == nil {
		fake.getAgentReturnsOnCall = make(map[int]struct {
			result1 server.OpenAICompatibleAgent
		})
	}
	fake.getAgentReturnsOnCall[i] = struct {
		result1 server.OpenAICompatibleAgent
	}{result1}
}

func (fake *FakeStreamableTaskHandler) HandleStreamingTask(arg1 context.Context, arg2 *types.Task, arg3 *types.Message) (<-chan server.StreamEvent, error) {
	fake.handleStreamingTaskMutex.Lock()
	ret, specificReturn := fake.handleStreamingTaskReturnsOnCall[len(fake.handleStreamingTaskArgsForCall)]
	fake.handleStreamingTaskArgsForCall = append(fake.handleStreamingTaskArgsForCall, struct {
		arg1 context.Context
		arg2 *types.Task
		arg3 *types.Message
	}{arg1, arg2, arg3})
	stub := fake.HandleStreamingTaskStub
	fakeReturns := fake.handleStreamingTaskReturns
	fake.recordInvocation("HandleStreamingTask", []interface{}{arg1, arg2, arg3})
	fake.handleStreamingTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStreamableTaskHandler) HandleStreamingTaskCallCount() int {
	fake.handleStreamingTaskMutex.RLock()
	defer fake.handleStreamingTaskMutex.RUnlock()
	return len(fake.handleStreamingTaskArgsForCall)
}

func (fake *FakeStreamableTaskHandler) HandleStreamingTaskCalls(stub func(context.Context, *types.Task, *types.Message) (<-chan server.StreamEvent, error)) {
	fake.handleStreamingTaskMutex.Lock()
	defer fake.handleStreamingTaskMutex.Unlock()
	fake.HandleStreamingTaskStub = stub
}

func (fake *FakeStreamableTaskHandler) HandleStreamingTaskArgsForCall(i int) (context.Context, *types.Task, *types.Message) {
	fake.handleStreamingTaskMutex.RLock()
	defer fake.handleStreamingTaskMutex.RUnlock()
	argsForCall := fake.handleStreamingTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStreamableTaskHandler) HandleStreamingTaskReturns(result1 <-chan server.StreamEvent, result2 error) {
	fake.handleStreamingTaskMutex.Lock()
	defer fake.handleStreamingTaskMutex.Unlock()
	fake.HandleStreamingTaskStub = nil
	fake.handleStreamingTaskReturns = struct {
		result1 <-chan server.StreamEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeStreamableTaskHandler) HandleStreamingTaskReturnsOnCall(i int, result1 <-chan server.StreamEvent, result2 error) {
	fake.handleStreamingTaskMutex.Lock()
	defer fake.handleStreamingTaskMutex.Unlock()
	fake.HandleStreamingTaskStub = nil
	if fake.handleStreamingTaskReturnsOnCall == nil {
		fake.handleStreamingTaskReturnsOnCall = make(map[int]struct {
			result1 <-chan server.StreamEvent
			result2 error
		})
	}
	fake.handleStreamingTaskReturnsOnCall[i] = struct {
		result1 <-chan server.StreamEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeStreamableTaskHandler) SetAgent(arg1 server.OpenAICompatibleAgent) {
	fake.setAgentMutex.Lock()
	fake.setAgentArgsForCall = append(fake.setAgentArgsForCall, struct {
		arg1 server.OpenAICompatibleAgent
	}{arg1})
	stub := fake.SetAgentStub
	fake.recordInvocation("SetAgent", []interface{}{arg1})
	fake.setAgentMutex.Unlock()
	if stub != nil {
		fake.SetAgentStub(arg1)
	}
}

func (fake *FakeStreamableTaskHandler) SetAgentCallCount() int {
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	return len(fake.setAgentArgsForCall)
}

func (fake *FakeStreamableTaskHandler) SetAgentCalls(stub func(server.OpenAICompatibleAgent)) {
	fake.setAgentMutex.Lock()
	defer fake.setAgentMutex.Unlock()
	fake.SetAgentStub = stub
}

func (fake *FakeStreamableTaskHandler) SetAgentArgsForCall(i int) server.OpenAICompatibleAgent {
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	argsForCall := fake.setAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStreamableTaskHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	fake.handleStreamingTaskMutex.RLock()
	defer fake.handleStreamingTaskMutex.RUnlock()
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStreamableTaskHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.StreamableTaskHandler = new(FakeStreamableTaskHandler)
