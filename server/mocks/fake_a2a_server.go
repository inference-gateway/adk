// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/adk/server"
	"github.com/inference-gateway/adk/types"
)

type FakeA2AServer struct {
	GetAgentStub        func() server.OpenAICompatibleAgent
	getAgentMutex       sync.RWMutex
	getAgentArgsForCall []struct {
	}
	getAgentReturns struct {
		result1 server.OpenAICompatibleAgent
	}
	getAgentReturnsOnCall map[int]struct {
		result1 server.OpenAICompatibleAgent
	}
	GetAgentCardStub        func() *types.AgentCard
	getAgentCardMutex       sync.RWMutex
	getAgentCardArgsForCall []struct {
	}
	getAgentCardReturns struct {
		result1 *types.AgentCard
	}
	getAgentCardReturnsOnCall map[int]struct {
		result1 *types.AgentCard
	}
	GetBackgroundTaskHandlerStub        func() server.TaskHandler
	getBackgroundTaskHandlerMutex       sync.RWMutex
	getBackgroundTaskHandlerArgsForCall []struct {
	}
	getBackgroundTaskHandlerReturns struct {
		result1 server.TaskHandler
	}
	getBackgroundTaskHandlerReturnsOnCall map[int]struct {
		result1 server.TaskHandler
	}
	GetStreamingTaskHandlerStub        func() server.StreamableTaskHandler
	getStreamingTaskHandlerMutex       sync.RWMutex
	getStreamingTaskHandlerArgsForCall []struct {
	}
	getStreamingTaskHandlerReturns struct {
		result1 server.StreamableTaskHandler
	}
	getStreamingTaskHandlerReturnsOnCall map[int]struct {
		result1 server.StreamableTaskHandler
	}
	LoadAgentCardFromFileStub        func(string, map[string]any) error
	loadAgentCardFromFileMutex       sync.RWMutex
	loadAgentCardFromFileArgsForCall []struct {
		arg1 string
		arg2 map[string]any
	}
	loadAgentCardFromFileReturns struct {
		result1 error
	}
	loadAgentCardFromFileReturnsOnCall map[int]struct {
		result1 error
	}
	SetAgentStub        func(server.OpenAICompatibleAgent)
	setAgentMutex       sync.RWMutex
	setAgentArgsForCall []struct {
		arg1 server.OpenAICompatibleAgent
	}
	SetAgentCardStub        func(types.AgentCard)
	setAgentCardMutex       sync.RWMutex
	setAgentCardArgsForCall []struct {
		arg1 types.AgentCard
	}
	SetAgentDescriptionStub        func(string)
	setAgentDescriptionMutex       sync.RWMutex
	setAgentDescriptionArgsForCall []struct {
		arg1 string
	}
	SetAgentNameStub        func(string)
	setAgentNameMutex       sync.RWMutex
	setAgentNameArgsForCall []struct {
		arg1 string
	}
	SetAgentURLStub        func(string)
	setAgentURLMutex       sync.RWMutex
	setAgentURLArgsForCall []struct {
		arg1 string
	}
	SetAgentVersionStub        func(string)
	setAgentVersionMutex       sync.RWMutex
	setAgentVersionArgsForCall []struct {
		arg1 string
	}
	SetBackgroundTaskHandlerStub        func(server.TaskHandler)
	setBackgroundTaskHandlerMutex       sync.RWMutex
	setBackgroundTaskHandlerArgsForCall []struct {
		arg1 server.TaskHandler
	}
	SetStreamingTaskHandlerStub        func(server.StreamableTaskHandler)
	setStreamingTaskHandlerMutex       sync.RWMutex
	setStreamingTaskHandlerArgsForCall []struct {
		arg1 server.StreamableTaskHandler
	}
	StartStub        func(context.Context) error
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		arg1 context.Context
	}
	startReturns struct {
		result1 error
	}
	startReturnsOnCall map[int]struct {
		result1 error
	}
	StartTaskProcessorStub        func(context.Context)
	startTaskProcessorMutex       sync.RWMutex
	startTaskProcessorArgsForCall []struct {
		arg1 context.Context
	}
	StopStub        func(context.Context) error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
		arg1 context.Context
	}
	stopReturns struct {
		result1 error
	}
	stopReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeA2AServer) GetAgent() server.OpenAICompatibleAgent {
	fake.getAgentMutex.Lock()
	ret, specificReturn := fake.getAgentReturnsOnCall[len(fake.getAgentArgsForCall)]
	fake.getAgentArgsForCall = append(fake.getAgentArgsForCall, struct {
	}{})
	stub := fake.GetAgentStub
	fakeReturns := fake.getAgentReturns
	fake.recordInvocation("GetAgent", []interface{}{})
	fake.getAgentMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) GetAgentCallCount() int {
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	return len(fake.getAgentArgsForCall)
}

func (fake *FakeA2AServer) GetAgentCalls(stub func() server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = stub
}

func (fake *FakeA2AServer) GetAgentReturns(result1 server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = nil
	fake.getAgentReturns = struct {
		result1 server.OpenAICompatibleAgent
	}{result1}
}

func (fake *FakeA2AServer) GetAgentReturnsOnCall(i int, result1 server.OpenAICompatibleAgent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = nil
	if fake.getAgentReturnsOnCall == nil {
		fake.getAgentReturnsOnCall = make(map[int]struct {
			result1 server.OpenAICompatibleAgent
		})
	}
	fake.getAgentReturnsOnCall[i] = struct {
		result1 server.OpenAICompatibleAgent
	}{result1}
}

func (fake *FakeA2AServer) GetAgentCard() *types.AgentCard {
	fake.getAgentCardMutex.Lock()
	ret, specificReturn := fake.getAgentCardReturnsOnCall[len(fake.getAgentCardArgsForCall)]
	fake.getAgentCardArgsForCall = append(fake.getAgentCardArgsForCall, struct {
	}{})
	stub := fake.GetAgentCardStub
	fakeReturns := fake.getAgentCardReturns
	fake.recordInvocation("GetAgentCard", []interface{}{})
	fake.getAgentCardMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) GetAgentCardCallCount() int {
	fake.getAgentCardMutex.RLock()
	defer fake.getAgentCardMutex.RUnlock()
	return len(fake.getAgentCardArgsForCall)
}

func (fake *FakeA2AServer) GetAgentCardCalls(stub func() *types.AgentCard) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = stub
}

func (fake *FakeA2AServer) GetAgentCardReturns(result1 *types.AgentCard) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = nil
	fake.getAgentCardReturns = struct {
		result1 *types.AgentCard
	}{result1}
}

func (fake *FakeA2AServer) GetAgentCardReturnsOnCall(i int, result1 *types.AgentCard) {
	fake.getAgentCardMutex.Lock()
	defer fake.getAgentCardMutex.Unlock()
	fake.GetAgentCardStub = nil
	if fake.getAgentCardReturnsOnCall == nil {
		fake.getAgentCardReturnsOnCall = make(map[int]struct {
			result1 *types.AgentCard
		})
	}
	fake.getAgentCardReturnsOnCall[i] = struct {
		result1 *types.AgentCard
	}{result1}
}

func (fake *FakeA2AServer) GetBackgroundTaskHandler() server.TaskHandler {
	fake.getBackgroundTaskHandlerMutex.Lock()
	ret, specificReturn := fake.getBackgroundTaskHandlerReturnsOnCall[len(fake.getBackgroundTaskHandlerArgsForCall)]
	fake.getBackgroundTaskHandlerArgsForCall = append(fake.getBackgroundTaskHandlerArgsForCall, struct {
	}{})
	stub := fake.GetBackgroundTaskHandlerStub
	fakeReturns := fake.getBackgroundTaskHandlerReturns
	fake.recordInvocation("GetBackgroundTaskHandler", []interface{}{})
	fake.getBackgroundTaskHandlerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) GetBackgroundTaskHandlerCallCount() int {
	fake.getBackgroundTaskHandlerMutex.RLock()
	defer fake.getBackgroundTaskHandlerMutex.RUnlock()
	return len(fake.getBackgroundTaskHandlerArgsForCall)
}

func (fake *FakeA2AServer) GetBackgroundTaskHandlerCalls(stub func() server.TaskHandler) {
	fake.getBackgroundTaskHandlerMutex.Lock()
	defer fake.getBackgroundTaskHandlerMutex.Unlock()
	fake.GetBackgroundTaskHandlerStub = stub
}

func (fake *FakeA2AServer) GetBackgroundTaskHandlerReturns(result1 server.TaskHandler) {
	fake.getBackgroundTaskHandlerMutex.Lock()
	defer fake.getBackgroundTaskHandlerMutex.Unlock()
	fake.GetBackgroundTaskHandlerStub = nil
	fake.getBackgroundTaskHandlerReturns = struct {
		result1 server.TaskHandler
	}{result1}
}

func (fake *FakeA2AServer) GetBackgroundTaskHandlerReturnsOnCall(i int, result1 server.TaskHandler) {
	fake.getBackgroundTaskHandlerMutex.Lock()
	defer fake.getBackgroundTaskHandlerMutex.Unlock()
	fake.GetBackgroundTaskHandlerStub = nil
	if fake.getBackgroundTaskHandlerReturnsOnCall == nil {
		fake.getBackgroundTaskHandlerReturnsOnCall = make(map[int]struct {
			result1 server.TaskHandler
		})
	}
	fake.getBackgroundTaskHandlerReturnsOnCall[i] = struct {
		result1 server.TaskHandler
	}{result1}
}

func (fake *FakeA2AServer) GetStreamingTaskHandler() server.StreamableTaskHandler {
	fake.getStreamingTaskHandlerMutex.Lock()
	ret, specificReturn := fake.getStreamingTaskHandlerReturnsOnCall[len(fake.getStreamingTaskHandlerArgsForCall)]
	fake.getStreamingTaskHandlerArgsForCall = append(fake.getStreamingTaskHandlerArgsForCall, struct {
	}{})
	stub := fake.GetStreamingTaskHandlerStub
	fakeReturns := fake.getStreamingTaskHandlerReturns
	fake.recordInvocation("GetStreamingTaskHandler", []interface{}{})
	fake.getStreamingTaskHandlerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) GetStreamingTaskHandlerCallCount() int {
	fake.getStreamingTaskHandlerMutex.RLock()
	defer fake.getStreamingTaskHandlerMutex.RUnlock()
	return len(fake.getStreamingTaskHandlerArgsForCall)
}

func (fake *FakeA2AServer) GetStreamingTaskHandlerCalls(stub func() server.StreamableTaskHandler) {
	fake.getStreamingTaskHandlerMutex.Lock()
	defer fake.getStreamingTaskHandlerMutex.Unlock()
	fake.GetStreamingTaskHandlerStub = stub
}

func (fake *FakeA2AServer) GetStreamingTaskHandlerReturns(result1 server.StreamableTaskHandler) {
	fake.getStreamingTaskHandlerMutex.Lock()
	defer fake.getStreamingTaskHandlerMutex.Unlock()
	fake.GetStreamingTaskHandlerStub = nil
	fake.getStreamingTaskHandlerReturns = struct {
		result1 server.StreamableTaskHandler
	}{result1}
}

func (fake *FakeA2AServer) GetStreamingTaskHandlerReturnsOnCall(i int, result1 server.StreamableTaskHandler) {
	fake.getStreamingTaskHandlerMutex.Lock()
	defer fake.getStreamingTaskHandlerMutex.Unlock()
	fake.GetStreamingTaskHandlerStub = nil
	if fake.getStreamingTaskHandlerReturnsOnCall == nil {
		fake.getStreamingTaskHandlerReturnsOnCall = make(map[int]struct {
			result1 server.StreamableTaskHandler
		})
	}
	fake.getStreamingTaskHandlerReturnsOnCall[i] = struct {
		result1 server.StreamableTaskHandler
	}{result1}
}

func (fake *FakeA2AServer) LoadAgentCardFromFile(arg1 string, arg2 map[string]any) error {
	fake.loadAgentCardFromFileMutex.Lock()
	ret, specificReturn := fake.loadAgentCardFromFileReturnsOnCall[len(fake.loadAgentCardFromFileArgsForCall)]
	fake.loadAgentCardFromFileArgsForCall = append(fake.loadAgentCardFromFileArgsForCall, struct {
		arg1 string
		arg2 map[string]any
	}{arg1, arg2})
	stub := fake.LoadAgentCardFromFileStub
	fakeReturns := fake.loadAgentCardFromFileReturns
	fake.recordInvocation("LoadAgentCardFromFile", []interface{}{arg1, arg2})
	fake.loadAgentCardFromFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) LoadAgentCardFromFileCallCount() int {
	fake.loadAgentCardFromFileMutex.RLock()
	defer fake.loadAgentCardFromFileMutex.RUnlock()
	return len(fake.loadAgentCardFromFileArgsForCall)
}

func (fake *FakeA2AServer) LoadAgentCardFromFileCalls(stub func(string, map[string]any) error) {
	fake.loadAgentCardFromFileMutex.Lock()
	defer fake.loadAgentCardFromFileMutex.Unlock()
	fake.LoadAgentCardFromFileStub = stub
}

func (fake *FakeA2AServer) LoadAgentCardFromFileArgsForCall(i int) (string, map[string]any) {
	fake.loadAgentCardFromFileMutex.RLock()
	defer fake.loadAgentCardFromFileMutex.RUnlock()
	argsForCall := fake.loadAgentCardFromFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AServer) LoadAgentCardFromFileReturns(result1 error) {
	fake.loadAgentCardFromFileMutex.Lock()
	defer fake.loadAgentCardFromFileMutex.Unlock()
	fake.LoadAgentCardFromFileStub = nil
	fake.loadAgentCardFromFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) LoadAgentCardFromFileReturnsOnCall(i int, result1 error) {
	fake.loadAgentCardFromFileMutex.Lock()
	defer fake.loadAgentCardFromFileMutex.Unlock()
	fake.LoadAgentCardFromFileStub = nil
	if fake.loadAgentCardFromFileReturnsOnCall == nil {
		fake.loadAgentCardFromFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loadAgentCardFromFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) SetAgent(arg1 server.OpenAICompatibleAgent) {
	fake.setAgentMutex.Lock()
	fake.setAgentArgsForCall = append(fake.setAgentArgsForCall, struct {
		arg1 server.OpenAICompatibleAgent
	}{arg1})
	stub := fake.SetAgentStub
	fake.recordInvocation("SetAgent", []interface{}{arg1})
	fake.setAgentMutex.Unlock()
	if stub != nil {
		fake.SetAgentStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentCallCount() int {
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	return len(fake.setAgentArgsForCall)
}

func (fake *FakeA2AServer) SetAgentCalls(stub func(server.OpenAICompatibleAgent)) {
	fake.setAgentMutex.Lock()
	defer fake.setAgentMutex.Unlock()
	fake.SetAgentStub = stub
}

func (fake *FakeA2AServer) SetAgentArgsForCall(i int) server.OpenAICompatibleAgent {
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	argsForCall := fake.setAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentCard(arg1 types.AgentCard) {
	fake.setAgentCardMutex.Lock()
	fake.setAgentCardArgsForCall = append(fake.setAgentCardArgsForCall, struct {
		arg1 types.AgentCard
	}{arg1})
	stub := fake.SetAgentCardStub
	fake.recordInvocation("SetAgentCard", []interface{}{arg1})
	fake.setAgentCardMutex.Unlock()
	if stub != nil {
		fake.SetAgentCardStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentCardCallCount() int {
	fake.setAgentCardMutex.RLock()
	defer fake.setAgentCardMutex.RUnlock()
	return len(fake.setAgentCardArgsForCall)
}

func (fake *FakeA2AServer) SetAgentCardCalls(stub func(types.AgentCard)) {
	fake.setAgentCardMutex.Lock()
	defer fake.setAgentCardMutex.Unlock()
	fake.SetAgentCardStub = stub
}

func (fake *FakeA2AServer) SetAgentCardArgsForCall(i int) types.AgentCard {
	fake.setAgentCardMutex.RLock()
	defer fake.setAgentCardMutex.RUnlock()
	argsForCall := fake.setAgentCardArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentDescription(arg1 string) {
	fake.setAgentDescriptionMutex.Lock()
	fake.setAgentDescriptionArgsForCall = append(fake.setAgentDescriptionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAgentDescriptionStub
	fake.recordInvocation("SetAgentDescription", []interface{}{arg1})
	fake.setAgentDescriptionMutex.Unlock()
	if stub != nil {
		fake.SetAgentDescriptionStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentDescriptionCallCount() int {
	fake.setAgentDescriptionMutex.RLock()
	defer fake.setAgentDescriptionMutex.RUnlock()
	return len(fake.setAgentDescriptionArgsForCall)
}

func (fake *FakeA2AServer) SetAgentDescriptionCalls(stub func(string)) {
	fake.setAgentDescriptionMutex.Lock()
	defer fake.setAgentDescriptionMutex.Unlock()
	fake.SetAgentDescriptionStub = stub
}

func (fake *FakeA2AServer) SetAgentDescriptionArgsForCall(i int) string {
	fake.setAgentDescriptionMutex.RLock()
	defer fake.setAgentDescriptionMutex.RUnlock()
	argsForCall := fake.setAgentDescriptionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentName(arg1 string) {
	fake.setAgentNameMutex.Lock()
	fake.setAgentNameArgsForCall = append(fake.setAgentNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAgentNameStub
	fake.recordInvocation("SetAgentName", []interface{}{arg1})
	fake.setAgentNameMutex.Unlock()
	if stub != nil {
		fake.SetAgentNameStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentNameCallCount() int {
	fake.setAgentNameMutex.RLock()
	defer fake.setAgentNameMutex.RUnlock()
	return len(fake.setAgentNameArgsForCall)
}

func (fake *FakeA2AServer) SetAgentNameCalls(stub func(string)) {
	fake.setAgentNameMutex.Lock()
	defer fake.setAgentNameMutex.Unlock()
	fake.SetAgentNameStub = stub
}

func (fake *FakeA2AServer) SetAgentNameArgsForCall(i int) string {
	fake.setAgentNameMutex.RLock()
	defer fake.setAgentNameMutex.RUnlock()
	argsForCall := fake.setAgentNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentURL(arg1 string) {
	fake.setAgentURLMutex.Lock()
	fake.setAgentURLArgsForCall = append(fake.setAgentURLArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAgentURLStub
	fake.recordInvocation("SetAgentURL", []interface{}{arg1})
	fake.setAgentURLMutex.Unlock()
	if stub != nil {
		fake.SetAgentURLStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentURLCallCount() int {
	fake.setAgentURLMutex.RLock()
	defer fake.setAgentURLMutex.RUnlock()
	return len(fake.setAgentURLArgsForCall)
}

func (fake *FakeA2AServer) SetAgentURLCalls(stub func(string)) {
	fake.setAgentURLMutex.Lock()
	defer fake.setAgentURLMutex.Unlock()
	fake.SetAgentURLStub = stub
}

func (fake *FakeA2AServer) SetAgentURLArgsForCall(i int) string {
	fake.setAgentURLMutex.RLock()
	defer fake.setAgentURLMutex.RUnlock()
	argsForCall := fake.setAgentURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetAgentVersion(arg1 string) {
	fake.setAgentVersionMutex.Lock()
	fake.setAgentVersionArgsForCall = append(fake.setAgentVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetAgentVersionStub
	fake.recordInvocation("SetAgentVersion", []interface{}{arg1})
	fake.setAgentVersionMutex.Unlock()
	if stub != nil {
		fake.SetAgentVersionStub(arg1)
	}
}

func (fake *FakeA2AServer) SetAgentVersionCallCount() int {
	fake.setAgentVersionMutex.RLock()
	defer fake.setAgentVersionMutex.RUnlock()
	return len(fake.setAgentVersionArgsForCall)
}

func (fake *FakeA2AServer) SetAgentVersionCalls(stub func(string)) {
	fake.setAgentVersionMutex.Lock()
	defer fake.setAgentVersionMutex.Unlock()
	fake.SetAgentVersionStub = stub
}

func (fake *FakeA2AServer) SetAgentVersionArgsForCall(i int) string {
	fake.setAgentVersionMutex.RLock()
	defer fake.setAgentVersionMutex.RUnlock()
	argsForCall := fake.setAgentVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetBackgroundTaskHandler(arg1 server.TaskHandler) {
	fake.setBackgroundTaskHandlerMutex.Lock()
	fake.setBackgroundTaskHandlerArgsForCall = append(fake.setBackgroundTaskHandlerArgsForCall, struct {
		arg1 server.TaskHandler
	}{arg1})
	stub := fake.SetBackgroundTaskHandlerStub
	fake.recordInvocation("SetBackgroundTaskHandler", []interface{}{arg1})
	fake.setBackgroundTaskHandlerMutex.Unlock()
	if stub != nil {
		fake.SetBackgroundTaskHandlerStub(arg1)
	}
}

func (fake *FakeA2AServer) SetBackgroundTaskHandlerCallCount() int {
	fake.setBackgroundTaskHandlerMutex.RLock()
	defer fake.setBackgroundTaskHandlerMutex.RUnlock()
	return len(fake.setBackgroundTaskHandlerArgsForCall)
}

func (fake *FakeA2AServer) SetBackgroundTaskHandlerCalls(stub func(server.TaskHandler)) {
	fake.setBackgroundTaskHandlerMutex.Lock()
	defer fake.setBackgroundTaskHandlerMutex.Unlock()
	fake.SetBackgroundTaskHandlerStub = stub
}

func (fake *FakeA2AServer) SetBackgroundTaskHandlerArgsForCall(i int) server.TaskHandler {
	fake.setBackgroundTaskHandlerMutex.RLock()
	defer fake.setBackgroundTaskHandlerMutex.RUnlock()
	argsForCall := fake.setBackgroundTaskHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) SetStreamingTaskHandler(arg1 server.StreamableTaskHandler) {
	fake.setStreamingTaskHandlerMutex.Lock()
	fake.setStreamingTaskHandlerArgsForCall = append(fake.setStreamingTaskHandlerArgsForCall, struct {
		arg1 server.StreamableTaskHandler
	}{arg1})
	stub := fake.SetStreamingTaskHandlerStub
	fake.recordInvocation("SetStreamingTaskHandler", []interface{}{arg1})
	fake.setStreamingTaskHandlerMutex.Unlock()
	if stub != nil {
		fake.SetStreamingTaskHandlerStub(arg1)
	}
}

func (fake *FakeA2AServer) SetStreamingTaskHandlerCallCount() int {
	fake.setStreamingTaskHandlerMutex.RLock()
	defer fake.setStreamingTaskHandlerMutex.RUnlock()
	return len(fake.setStreamingTaskHandlerArgsForCall)
}

func (fake *FakeA2AServer) SetStreamingTaskHandlerCalls(stub func(server.StreamableTaskHandler)) {
	fake.setStreamingTaskHandlerMutex.Lock()
	defer fake.setStreamingTaskHandlerMutex.Unlock()
	fake.SetStreamingTaskHandlerStub = stub
}

func (fake *FakeA2AServer) SetStreamingTaskHandlerArgsForCall(i int) server.StreamableTaskHandler {
	fake.setStreamingTaskHandlerMutex.RLock()
	defer fake.setStreamingTaskHandlerMutex.RUnlock()
	argsForCall := fake.setStreamingTaskHandlerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) Start(arg1 context.Context) error {
	fake.startMutex.Lock()
	ret, specificReturn := fake.startReturnsOnCall[len(fake.startArgsForCall)]
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.StartStub
	fakeReturns := fake.startReturns
	fake.recordInvocation("Start", []interface{}{arg1})
	fake.startMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeA2AServer) StartCalls(stub func(context.Context) error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *FakeA2AServer) StartArgsForCall(i int) context.Context {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	argsForCall := fake.startArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) StartReturns(result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) StartReturnsOnCall(i int, result1 error) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = nil
	if fake.startReturnsOnCall == nil {
		fake.startReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) StartTaskProcessor(arg1 context.Context) {
	fake.startTaskProcessorMutex.Lock()
	fake.startTaskProcessorArgsForCall = append(fake.startTaskProcessorArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.StartTaskProcessorStub
	fake.recordInvocation("StartTaskProcessor", []interface{}{arg1})
	fake.startTaskProcessorMutex.Unlock()
	if stub != nil {
		fake.StartTaskProcessorStub(arg1)
	}
}

func (fake *FakeA2AServer) StartTaskProcessorCallCount() int {
	fake.startTaskProcessorMutex.RLock()
	defer fake.startTaskProcessorMutex.RUnlock()
	return len(fake.startTaskProcessorArgsForCall)
}

func (fake *FakeA2AServer) StartTaskProcessorCalls(stub func(context.Context)) {
	fake.startTaskProcessorMutex.Lock()
	defer fake.startTaskProcessorMutex.Unlock()
	fake.StartTaskProcessorStub = stub
}

func (fake *FakeA2AServer) StartTaskProcessorArgsForCall(i int) context.Context {
	fake.startTaskProcessorMutex.RLock()
	defer fake.startTaskProcessorMutex.RUnlock()
	argsForCall := fake.startTaskProcessorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) Stop(arg1 context.Context) error {
	fake.stopMutex.Lock()
	ret, specificReturn := fake.stopReturnsOnCall[len(fake.stopArgsForCall)]
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.StopStub
	fakeReturns := fake.stopReturns
	fake.recordInvocation("Stop", []interface{}{arg1})
	fake.stopMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeA2AServer) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeA2AServer) StopCalls(stub func(context.Context) error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *FakeA2AServer) StopArgsForCall(i int) context.Context {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	argsForCall := fake.stopArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeA2AServer) StopReturns(result1 error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) StopReturnsOnCall(i int, result1 error) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = nil
	if fake.stopReturnsOnCall == nil {
		fake.stopReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeA2AServer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	fake.getAgentCardMutex.RLock()
	defer fake.getAgentCardMutex.RUnlock()
	fake.getBackgroundTaskHandlerMutex.RLock()
	defer fake.getBackgroundTaskHandlerMutex.RUnlock()
	fake.getStreamingTaskHandlerMutex.RLock()
	defer fake.getStreamingTaskHandlerMutex.RUnlock()
	fake.loadAgentCardFromFileMutex.RLock()
	defer fake.loadAgentCardFromFileMutex.RUnlock()
	fake.setAgentMutex.RLock()
	defer fake.setAgentMutex.RUnlock()
	fake.setAgentCardMutex.RLock()
	defer fake.setAgentCardMutex.RUnlock()
	fake.setAgentDescriptionMutex.RLock()
	defer fake.setAgentDescriptionMutex.RUnlock()
	fake.setAgentNameMutex.RLock()
	defer fake.setAgentNameMutex.RUnlock()
	fake.setAgentURLMutex.RLock()
	defer fake.setAgentURLMutex.RUnlock()
	fake.setAgentVersionMutex.RLock()
	defer fake.setAgentVersionMutex.RUnlock()
	fake.setBackgroundTaskHandlerMutex.RLock()
	defer fake.setBackgroundTaskHandlerMutex.RUnlock()
	fake.setStreamingTaskHandlerMutex.RLock()
	defer fake.setStreamingTaskHandlerMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.startTaskProcessorMutex.RLock()
	defer fake.startTaskProcessorMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeA2AServer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.A2AServer = new(FakeA2AServer)
