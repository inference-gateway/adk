// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/inference-gateway/adk/server"
	"github.com/inference-gateway/adk/types"
)

type FakeTaskHandler struct {
	HandleTaskStub        func(context.Context, *types.Task, *types.Message, server.OpenAICompatibleAgent) (*types.Task, error)
	handleTaskMutex       sync.RWMutex
	handleTaskArgsForCall []struct {
		arg1 context.Context
		arg2 *types.Task
		arg3 *types.Message
		arg4 server.OpenAICompatibleAgent
	}
	handleTaskReturns struct {
		result1 *types.Task
		result2 error
	}
	handleTaskReturnsOnCall map[int]struct {
		result1 *types.Task
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskHandler) HandleTask(arg1 context.Context, arg2 *types.Task, arg3 *types.Message, arg4 server.OpenAICompatibleAgent) (*types.Task, error) {
	fake.handleTaskMutex.Lock()
	ret, specificReturn := fake.handleTaskReturnsOnCall[len(fake.handleTaskArgsForCall)]
	fake.handleTaskArgsForCall = append(fake.handleTaskArgsForCall, struct {
		arg1 context.Context
		arg2 *types.Task
		arg3 *types.Message
		arg4 server.OpenAICompatibleAgent
	}{arg1, arg2, arg3, arg4})
	stub := fake.HandleTaskStub
	fakeReturns := fake.handleTaskReturns
	fake.recordInvocation("HandleTask", []interface{}{arg1, arg2, arg3, arg4})
	fake.handleTaskMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskHandler) HandleTaskCallCount() int {
	fake.handleTaskMutex.RLock()
	defer fake.handleTaskMutex.RUnlock()
	return len(fake.handleTaskArgsForCall)
}

func (fake *FakeTaskHandler) HandleTaskCalls(stub func(context.Context, *types.Task, *types.Message, server.OpenAICompatibleAgent) (*types.Task, error)) {
	fake.handleTaskMutex.Lock()
	defer fake.handleTaskMutex.Unlock()
	fake.HandleTaskStub = stub
}

func (fake *FakeTaskHandler) HandleTaskArgsForCall(i int) (context.Context, *types.Task, *types.Message, server.OpenAICompatibleAgent) {
	fake.handleTaskMutex.RLock()
	defer fake.handleTaskMutex.RUnlock()
	argsForCall := fake.handleTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeTaskHandler) HandleTaskReturns(result1 *types.Task, result2 error) {
	fake.handleTaskMutex.Lock()
	defer fake.handleTaskMutex.Unlock()
	fake.HandleTaskStub = nil
	fake.handleTaskReturns = struct {
		result1 *types.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskHandler) HandleTaskReturnsOnCall(i int, result1 *types.Task, result2 error) {
	fake.handleTaskMutex.Lock()
	defer fake.handleTaskMutex.Unlock()
	fake.HandleTaskStub = nil
	if fake.handleTaskReturnsOnCall == nil {
		fake.handleTaskReturnsOnCall = make(map[int]struct {
			result1 *types.Task
			result2 error
		})
	}
	fake.handleTaskReturnsOnCall[i] = struct {
		result1 *types.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleTaskMutex.RLock()
	defer fake.handleTaskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.TaskHandler = new(FakeTaskHandler)
