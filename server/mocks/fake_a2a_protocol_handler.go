// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/inference-gateway/adk/server"
	"github.com/inference-gateway/adk/types"
)

type FakeA2AProtocolHandler struct {
	HandleMessageSendStub        func(*gin.Context, types.JSONRPCRequest)
	handleMessageSendMutex       sync.RWMutex
	handleMessageSendArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	HandleMessageStreamStub        func(*gin.Context, types.JSONRPCRequest)
	handleMessageStreamMutex       sync.RWMutex
	handleMessageStreamArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	HandleTaskCancelStub        func(*gin.Context, types.JSONRPCRequest)
	handleTaskCancelMutex       sync.RWMutex
	handleTaskCancelArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	HandleTaskGetStub        func(*gin.Context, types.JSONRPCRequest)
	handleTaskGetMutex       sync.RWMutex
	handleTaskGetArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	HandleTaskListStub        func(*gin.Context, types.JSONRPCRequest)
	handleTaskListMutex       sync.RWMutex
	handleTaskListArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	HandleTaskPushNotificationConfigDeleteStub        func(*gin.Context, types.JSONRPCRequest)
	handleTaskPushNotificationConfigDeleteMutex       sync.RWMutex
	handleTaskPushNotificationConfigDeleteArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	HandleTaskPushNotificationConfigGetStub        func(*gin.Context, types.JSONRPCRequest)
	handleTaskPushNotificationConfigGetMutex       sync.RWMutex
	handleTaskPushNotificationConfigGetArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	HandleTaskPushNotificationConfigListStub        func(*gin.Context, types.JSONRPCRequest)
	handleTaskPushNotificationConfigListMutex       sync.RWMutex
	handleTaskPushNotificationConfigListArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	HandleTaskPushNotificationConfigSetStub        func(*gin.Context, types.JSONRPCRequest)
	handleTaskPushNotificationConfigSetMutex       sync.RWMutex
	handleTaskPushNotificationConfigSetArgsForCall []struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeA2AProtocolHandler) HandleMessageSend(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleMessageSendMutex.Lock()
	fake.handleMessageSendArgsForCall = append(fake.handleMessageSendArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleMessageSendStub
	fake.recordInvocation("HandleMessageSend", []interface{}{arg1, arg2})
	fake.handleMessageSendMutex.Unlock()
	if stub != nil {
		fake.HandleMessageSendStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleMessageSendCallCount() int {
	fake.handleMessageSendMutex.RLock()
	defer fake.handleMessageSendMutex.RUnlock()
	return len(fake.handleMessageSendArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleMessageSendCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleMessageSendMutex.Lock()
	defer fake.handleMessageSendMutex.Unlock()
	fake.HandleMessageSendStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleMessageSendArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleMessageSendMutex.RLock()
	defer fake.handleMessageSendMutex.RUnlock()
	argsForCall := fake.handleMessageSendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) HandleMessageStream(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleMessageStreamMutex.Lock()
	fake.handleMessageStreamArgsForCall = append(fake.handleMessageStreamArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleMessageStreamStub
	fake.recordInvocation("HandleMessageStream", []interface{}{arg1, arg2})
	fake.handleMessageStreamMutex.Unlock()
	if stub != nil {
		fake.HandleMessageStreamStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleMessageStreamCallCount() int {
	fake.handleMessageStreamMutex.RLock()
	defer fake.handleMessageStreamMutex.RUnlock()
	return len(fake.handleMessageStreamArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleMessageStreamCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleMessageStreamMutex.Lock()
	defer fake.handleMessageStreamMutex.Unlock()
	fake.HandleMessageStreamStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleMessageStreamArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleMessageStreamMutex.RLock()
	defer fake.handleMessageStreamMutex.RUnlock()
	argsForCall := fake.handleMessageStreamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) HandleTaskCancel(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleTaskCancelMutex.Lock()
	fake.handleTaskCancelArgsForCall = append(fake.handleTaskCancelArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskCancelStub
	fake.recordInvocation("HandleTaskCancel", []interface{}{arg1, arg2})
	fake.handleTaskCancelMutex.Unlock()
	if stub != nil {
		fake.HandleTaskCancelStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleTaskCancelCallCount() int {
	fake.handleTaskCancelMutex.RLock()
	defer fake.handleTaskCancelMutex.RUnlock()
	return len(fake.handleTaskCancelArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleTaskCancelCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleTaskCancelMutex.Lock()
	defer fake.handleTaskCancelMutex.Unlock()
	fake.HandleTaskCancelStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleTaskCancelArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleTaskCancelMutex.RLock()
	defer fake.handleTaskCancelMutex.RUnlock()
	argsForCall := fake.handleTaskCancelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) HandleTaskGet(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleTaskGetMutex.Lock()
	fake.handleTaskGetArgsForCall = append(fake.handleTaskGetArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskGetStub
	fake.recordInvocation("HandleTaskGet", []interface{}{arg1, arg2})
	fake.handleTaskGetMutex.Unlock()
	if stub != nil {
		fake.HandleTaskGetStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleTaskGetCallCount() int {
	fake.handleTaskGetMutex.RLock()
	defer fake.handleTaskGetMutex.RUnlock()
	return len(fake.handleTaskGetArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleTaskGetCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleTaskGetMutex.Lock()
	defer fake.handleTaskGetMutex.Unlock()
	fake.HandleTaskGetStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleTaskGetArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleTaskGetMutex.RLock()
	defer fake.handleTaskGetMutex.RUnlock()
	argsForCall := fake.handleTaskGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) HandleTaskList(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleTaskListMutex.Lock()
	fake.handleTaskListArgsForCall = append(fake.handleTaskListArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskListStub
	fake.recordInvocation("HandleTaskList", []interface{}{arg1, arg2})
	fake.handleTaskListMutex.Unlock()
	if stub != nil {
		fake.HandleTaskListStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleTaskListCallCount() int {
	fake.handleTaskListMutex.RLock()
	defer fake.handleTaskListMutex.RUnlock()
	return len(fake.handleTaskListArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleTaskListCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleTaskListMutex.Lock()
	defer fake.handleTaskListMutex.Unlock()
	fake.HandleTaskListStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleTaskListArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleTaskListMutex.RLock()
	defer fake.handleTaskListMutex.RUnlock()
	argsForCall := fake.handleTaskListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigDelete(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleTaskPushNotificationConfigDeleteMutex.Lock()
	fake.handleTaskPushNotificationConfigDeleteArgsForCall = append(fake.handleTaskPushNotificationConfigDeleteArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskPushNotificationConfigDeleteStub
	fake.recordInvocation("HandleTaskPushNotificationConfigDelete", []interface{}{arg1, arg2})
	fake.handleTaskPushNotificationConfigDeleteMutex.Unlock()
	if stub != nil {
		fake.HandleTaskPushNotificationConfigDeleteStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigDeleteCallCount() int {
	fake.handleTaskPushNotificationConfigDeleteMutex.RLock()
	defer fake.handleTaskPushNotificationConfigDeleteMutex.RUnlock()
	return len(fake.handleTaskPushNotificationConfigDeleteArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigDeleteCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleTaskPushNotificationConfigDeleteMutex.Lock()
	defer fake.handleTaskPushNotificationConfigDeleteMutex.Unlock()
	fake.HandleTaskPushNotificationConfigDeleteStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigDeleteArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleTaskPushNotificationConfigDeleteMutex.RLock()
	defer fake.handleTaskPushNotificationConfigDeleteMutex.RUnlock()
	argsForCall := fake.handleTaskPushNotificationConfigDeleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigGet(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleTaskPushNotificationConfigGetMutex.Lock()
	fake.handleTaskPushNotificationConfigGetArgsForCall = append(fake.handleTaskPushNotificationConfigGetArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskPushNotificationConfigGetStub
	fake.recordInvocation("HandleTaskPushNotificationConfigGet", []interface{}{arg1, arg2})
	fake.handleTaskPushNotificationConfigGetMutex.Unlock()
	if stub != nil {
		fake.HandleTaskPushNotificationConfigGetStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigGetCallCount() int {
	fake.handleTaskPushNotificationConfigGetMutex.RLock()
	defer fake.handleTaskPushNotificationConfigGetMutex.RUnlock()
	return len(fake.handleTaskPushNotificationConfigGetArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigGetCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleTaskPushNotificationConfigGetMutex.Lock()
	defer fake.handleTaskPushNotificationConfigGetMutex.Unlock()
	fake.HandleTaskPushNotificationConfigGetStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigGetArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleTaskPushNotificationConfigGetMutex.RLock()
	defer fake.handleTaskPushNotificationConfigGetMutex.RUnlock()
	argsForCall := fake.handleTaskPushNotificationConfigGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigList(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleTaskPushNotificationConfigListMutex.Lock()
	fake.handleTaskPushNotificationConfigListArgsForCall = append(fake.handleTaskPushNotificationConfigListArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskPushNotificationConfigListStub
	fake.recordInvocation("HandleTaskPushNotificationConfigList", []interface{}{arg1, arg2})
	fake.handleTaskPushNotificationConfigListMutex.Unlock()
	if stub != nil {
		fake.HandleTaskPushNotificationConfigListStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigListCallCount() int {
	fake.handleTaskPushNotificationConfigListMutex.RLock()
	defer fake.handleTaskPushNotificationConfigListMutex.RUnlock()
	return len(fake.handleTaskPushNotificationConfigListArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigListCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleTaskPushNotificationConfigListMutex.Lock()
	defer fake.handleTaskPushNotificationConfigListMutex.Unlock()
	fake.HandleTaskPushNotificationConfigListStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigListArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleTaskPushNotificationConfigListMutex.RLock()
	defer fake.handleTaskPushNotificationConfigListMutex.RUnlock()
	argsForCall := fake.handleTaskPushNotificationConfigListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigSet(arg1 *gin.Context, arg2 types.JSONRPCRequest) {
	fake.handleTaskPushNotificationConfigSetMutex.Lock()
	fake.handleTaskPushNotificationConfigSetArgsForCall = append(fake.handleTaskPushNotificationConfigSetArgsForCall, struct {
		arg1 *gin.Context
		arg2 types.JSONRPCRequest
	}{arg1, arg2})
	stub := fake.HandleTaskPushNotificationConfigSetStub
	fake.recordInvocation("HandleTaskPushNotificationConfigSet", []interface{}{arg1, arg2})
	fake.handleTaskPushNotificationConfigSetMutex.Unlock()
	if stub != nil {
		fake.HandleTaskPushNotificationConfigSetStub(arg1, arg2)
	}
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigSetCallCount() int {
	fake.handleTaskPushNotificationConfigSetMutex.RLock()
	defer fake.handleTaskPushNotificationConfigSetMutex.RUnlock()
	return len(fake.handleTaskPushNotificationConfigSetArgsForCall)
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigSetCalls(stub func(*gin.Context, types.JSONRPCRequest)) {
	fake.handleTaskPushNotificationConfigSetMutex.Lock()
	defer fake.handleTaskPushNotificationConfigSetMutex.Unlock()
	fake.HandleTaskPushNotificationConfigSetStub = stub
}

func (fake *FakeA2AProtocolHandler) HandleTaskPushNotificationConfigSetArgsForCall(i int) (*gin.Context, types.JSONRPCRequest) {
	fake.handleTaskPushNotificationConfigSetMutex.RLock()
	defer fake.handleTaskPushNotificationConfigSetMutex.RUnlock()
	argsForCall := fake.handleTaskPushNotificationConfigSetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeA2AProtocolHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMessageSendMutex.RLock()
	defer fake.handleMessageSendMutex.RUnlock()
	fake.handleMessageStreamMutex.RLock()
	defer fake.handleMessageStreamMutex.RUnlock()
	fake.handleTaskCancelMutex.RLock()
	defer fake.handleTaskCancelMutex.RUnlock()
	fake.handleTaskGetMutex.RLock()
	defer fake.handleTaskGetMutex.RUnlock()
	fake.handleTaskListMutex.RLock()
	defer fake.handleTaskListMutex.RUnlock()
	fake.handleTaskPushNotificationConfigDeleteMutex.RLock()
	defer fake.handleTaskPushNotificationConfigDeleteMutex.RUnlock()
	fake.handleTaskPushNotificationConfigGetMutex.RLock()
	defer fake.handleTaskPushNotificationConfigGetMutex.RUnlock()
	fake.handleTaskPushNotificationConfigListMutex.RLock()
	defer fake.handleTaskPushNotificationConfigListMutex.RUnlock()
	fake.handleTaskPushNotificationConfigSetMutex.RLock()
	defer fake.handleTaskPushNotificationConfigSetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeA2AProtocolHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.A2AProtocolHandler = new(FakeA2AProtocolHandler)
