version: '3.8'

services:
  # MinIO - S3-compatible object storage for artifacts
  # Optional: Use this when you want cloud-native artifact storage
  minio:
    image: minio/minio:latest
    container_name: adk-minio
    ports:
      - "9000:9000"   # MinIO API port
      - "9001:9001"   # MinIO Console port
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - adk-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client - For bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: adk-minio-init
    depends_on:
      - minio
    networks:
      - adk-network
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password123) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/artifacts;
      /usr/bin/mc policy set public minio/artifacts;
      exit 0;
      "

  # A2A Server with Filesystem Storage
  # Use this for simple local development and testing
  adk-server-filesystem:
    build:
      context: .
      dockerfile: examples/server/Dockerfile.filesystem
    container_name: adk-server-filesystem
    ports:
      - "8080:8080"   # A2A Server port
      - "8081:8081"   # Artifacts Server port
    environment:
      AGENT_NAME: "Filesystem Artifacts Agent"
      ARTIFACTS_ENABLE: "true"
      ARTIFACTS_STORAGE_PROVIDER: "filesystem"
      ARTIFACTS_STORAGE_BASE_PATH: "/artifacts"
      ARTIFACTS_SERVER_PORT: "8081"
    volumes:
      - ./artifacts:/artifacts
    networks:
      - adk-network
    profiles:
      - filesystem

  # A2A Server with MinIO Storage
  # Use this for production-ready cloud-native artifact storage
  adk-server-minio:
    build:
      context: .
      dockerfile: examples/server/Dockerfile.minio
    container_name: adk-server-minio
    ports:
      - "8080:8080"   # A2A Server port
      - "8081:8081"   # Artifacts Server port
    environment:
      AGENT_NAME: "MinIO Artifacts Agent"
      ARTIFACTS_ENABLE: "true"
      ARTIFACTS_STORAGE_PROVIDER: "minio"
      ARTIFACTS_STORAGE_MINIO_ENDPOINT: "minio:9000"
      ARTIFACTS_STORAGE_MINIO_ACCESS_KEY: "admin"
      ARTIFACTS_STORAGE_MINIO_SECRET_KEY: "password123"
      ARTIFACTS_STORAGE_MINIO_BUCKET: "artifacts"
      ARTIFACTS_STORAGE_MINIO_USE_SSL: "false"
      ARTIFACTS_SERVER_PORT: "8081"
    depends_on:
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    networks:
      - adk-network
    profiles:
      - minio

networks:
  adk-network:
    driver: bridge

volumes:
  minio_data:
    driver: local

# Usage Instructions:
#
# 1. Filesystem Storage (Simple local development):
#    docker-compose --profile filesystem up -d
#    
#    This starts:
#    - A2A Server with filesystem storage at http://localhost:8080
#    - Artifacts Server at http://localhost:8081
#    - Artifacts stored in ./artifacts directory
#
# 2. MinIO Storage (Production-ready cloud storage):
#    docker-compose --profile minio up -d
#    
#    This starts:
#    - MinIO server at http://localhost:9000 (API) and http://localhost:9001 (Console)
#    - A2A Server with MinIO storage at http://localhost:8080
#    - Artifacts Server at http://localhost:8081
#    - Artifacts stored in MinIO bucket
#
# 3. MinIO Only (External storage for existing A2A servers):
#    docker-compose up minio minio-init -d
#    
#    This starts only MinIO for use with external A2A servers
#
# 4. All Services (For development and testing):
#    docker-compose --profile filesystem --profile minio up -d
#    
#    Note: You'll need to use different ports for the A2A servers in this case